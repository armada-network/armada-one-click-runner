version: 2.1

parameters:
  SOURCE_TYPE:
    type: string
    default: "github"
  S3_URL:
    type: string
    default: ""
  REPOSITORY:
    type: string
    default: "https://github.com/thales-markets/thales-sport-markets"
  REF:
    type: string
    default: "main"
  BUILD_DIR:
    type: string
    default: ""
  PACKAGE_INSTALL_COMMAND:
    type: string
    default: "export NODE_OPTIONS=--openssl-legacy-provider && npm install"
  BUILD_COMMAND:
    type: string
    default: "npm run build"
  OUTPUT_DIR:
    type: string
    default: "build"
  ONE_CLICK_SERVER_URL:
    type: string
    default: ""
  ENVIRONMENT_VARIABLES:
    type: string
    default: ""  # Base64 encoded
  ENVIRONMENT:
    type: string
    default: "default"
    enum: ["default", "development", "sepolia", "sepolia-staging"]

jobs:
  publish:
    docker:
      - image: cimg/node:current
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && sudo apt-get install -y awscli
      - run:
          name: Decode environment variables
          command: |
            echo "<< pipeline.parameters.ENVIRONMENT_VARIABLES >>" | base64 --decode > ~/project/.env
            cat ~/project/.env

            echo "Environment variables after sourcing:"
            env
            # Log parameter values
            echo "Source type: << pipeline.parameters.SOURCE_TYPE >>"
            echo "S3 URL: << pipeline.parameters.S3_URL >>"
            echo "Repository: << pipeline.parameters.REPOSITORY >>"
            echo "Reference: << pipeline.parameters.REF >>"
            echo "Build directory: << pipeline.parameters.BUILD_DIR >>"
            echo "Package install command: << pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
            echo "Build command: << pipeline.parameters.BUILD_COMMAND >>"
            echo "Output directory: << pipeline.parameters.OUTPUT_DIR >>"
            echo "One click server URL: << pipeline.parameters.ONE_CLICK_SERVER_URL >>"
            echo "Environment: << pipeline.parameters.ENVIRONMENT >>"

      - when:
          condition:
            or:
              - equal: ["<< pipeline.parameters.SOURCE_TYPE >>", "url"]
              - equal: ["<< pipeline.parameters.SOURCE_TYPE >>", "github"]

          steps:
            - run:
                name: Clone repository from URL
                command: |
                  git clone "<< pipeline.parameters.REPOSITORY >>.git" ~/project/repository
                  if [ "<< pipeline.parameters.REF >>" != "main" ]; then
                    cd ~/project/repository
                    git checkout "<< pipeline.parameters.REF >>"
                  fi
            - run:
                name: Run build command
                working_directory: ~/project/repository
                command: |
                  set -e  # Ensure that the script fails if any command fails
                  source ~/project/.env

                  # Navigate to the build directory if specified
                  if [ -n "<< pipeline.parameters.BUILD_DIR >>" ]; then
                    echo "Changing to build directory: << pipeline.parameters.BUILD_DIR >>"
                    cd "<< pipeline.parameters.BUILD_DIR >>"
                  else
                    echo "No build directory specified, staying in repository root."
                  fi

                  # Run package install command if specified
                  if [ -n "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>" ]; then
                    echo "Running package install command..."
                    eval "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
                  else
                    echo "No package install command specified."
                  fi

                  # Run build command
                  echo "Running build command..."
                  eval "<< pipeline.parameters.BUILD_COMMAND >>"

      - when:
          condition:
            equal: ["upload", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - run:
                name: Download and Extract from S3
                command: |
                  aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                  aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                  aws configure set default.region $AWS_REGION

                  if [ "<< pipeline.parameters.ENVIRONMENT >>" == "development" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_DEV
                  elif [ "<< pipeline.parameters.ENVIRONMENT >>" == "sepolia" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_SEPOLIA
                  elif [ "<< pipeline.parameters.ENVIRONMENT >>" == "staging-sepolia" ]; then
                    S3_BUCKET_NAME=$AWS_S3_USER_UPLOADS_BUCKET_NAME_SEPOLIA_STAGING
                  else
                    echo "Invalid / default environment specified."
                    exit 1
                  fi

                  S3_PATH="s3://$S3_BUCKET_NAME/$(basename "<< pipeline.parameters.S3_URL >>")"
                  aws s3 cp $S3_PATH package.zip
                  unzip package.zip -d ~/project/repository
                  echo "Extracted to: ~/project/repository"

      - run:
          name: Create armada release
          working_directory: ~/project/repository
          command: |
            bundle_filename="$(npx --package=armada-cli@0.4.1 --yes armada bundle create armada-bundle .)"
            checksum="$(npx --package=armada-cli@0.4.1 --yes armada bundle checksum $bundle_filename)"
            echo $checksum > checksum
            echo "Bundle Filename: $bundle_filename"
            echo "Checksum: $checksum"
            mv ~/project/repository/armada-bundle.tgz ~/project/armada-bundle.tgz
        
      # store artifacts in circleci for download
      - store_artifacts:
          path: armada-bundle.tgz
      - store_artifacts:
          path: ~/project/repository/checksum
      - run:
          name: Notify one click server of new release
          command: |
            BUNDLE_URL="https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/armada-bundle.tgz"
            PIPELINE_ID="<< pipeline.id >>"
            CHECKSUM=$(cat ~/project/repository/checksum)
            ONE_CLICK_SERVER_URL="<< pipeline.parameters.ONE_CLICK_SERVER_URL >>"
            
            echo "Bundle URL: $BUNDLE_URL"
            echo "Pipeline ID: $PIPELINE_ID"
            echo "Checksum: $CHECKSUM"
            echo "One Click Server URL: $ONE_CLICK_SERVER_URL"

            FULL_URL="${ONE_CLICK_SERVER_URL}/circleci/notify"
            echo "Full URL: $FULL_URL"

            DATA='{"checksum": "'"$CHECKSUM"'", "bundleUrl": "'"$BUNDLE_URL"'", "pipelineId": "'"$PIPELINE_ID"'"}'
            echo "Data Payload: $DATA"

            curl -X POST -H "Content-Type: application/json" -d "$DATA" "$FULL_URL"

workflows:
  version: 2
  build-and-publish:
    jobs:
      - publish
