version: 2.1

parameters:
  SOURCE_TYPE:
    type: string
    default: "github"
  S3_URL:
    type: string
    default: ""
  REPOSITORY:
    type: string
    default: "thales-markets/thales-sport-markets"
  REF:
    type: string
    default: "main"
  BUILD_DIR:
    type: string
    default: ""
  PACKAGE_INSTALL_COMMAND:
    type: string
    default: "export NODE_OPTIONS=--openssl-legacy-provider && npm install"
  BUILD_COMMAND:
    type: string
    default: "npm run build"
  OUTPUT_DIR:
    type: string
    default: "build"
  ONE_CLICK_SERVER_URL:
    type: string
    default: ""
  ENVIRONMENT_VARIABLES:
    type: string
    default: ""  # Base64 encoded

jobs:
  publish:
    docker:
      - image: cimg/node:current
    steps:
      # decode environment variables and store in workspace
      - run:
          name: Decode environment variables
          command: |
            echo "<< pipeline.parameters.ENVIRONMENT_VARIABLES >>" | base64 --decode > ~/project/.env
            cat ~/project/.env
      - when:
          condition:
            equal: ["github", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - run:
                name: Clone GitHub repository
                command: |
                  git clone "https://github.com/<< pipeline.parameters.REPOSITORY >>.git" ~/project/repository
                  if [ "<< pipeline.parameters.REF >>" != "main" ]; then
                    cd ~/project/repository
                    git checkout "<< pipeline.parameters.REF >>"
                  fi
      - when:
          condition:
            equal: ["s3", "<< pipeline.parameters.SOURCE_TYPE >>"]
          steps:
            - run:
                name: Download and Extract from S3
                command: |
                  curl "<< pipeline.parameters.S3_URL >>" -o package.zip
                  unzip package.zip -d ~/project/repository
      - run:
          name: Run build command
          working_directory: ~/project/repository
          command: |
            source ~/project/.env
            if [ -n "<< pipeline.parameters.BUILD_DIR >>" ]; then
              cd "<< pipeline.parameters.BUILD_DIR >>"
            fi
            "<< pipeline.parameters.PACKAGE_INSTALL_COMMAND >>"
            "<< pipeline.parameters.BUILD_COMMAND >>"
      - run:
          name: Create armada release
          working_directory: ~/project/repository
          command: |
            bundle_filename="$(npx --package=armada-cli@0.4.1 --yes armada bundle create armada-bundle << pipeline.parameters.OUTPUT_DIR >>)"
            checksum="$(npx --package=armada-cli@0.4.1 --yes armada bundle checksum $bundle_filename)"
            echo $checksum > checksum
            echo "Bundle Filename: $bundle_filename"
            echo "Checksum: $checksum"
        
      # store artifacts in circleci for download
      - store_artifacts:
          path: ~/project/repository/armada-bundle.tgz
      - store_artifacts:
          path: ~/project/repository/checksum
      - run:
          name: Notify one click server of new release
          command: |
            BUNDLE_URL=https://output.circle-artifacts.com/output/job/${CIRCLE_WORKFLOW_JOB_ID}/artifacts/${CIRCLE_NODE_INDEX}/armada-bundle.tgz
            PIPELINE_ID=<< pipeline.id >>
            CHECKSUM=$(cat ~/project/repository/checksum)
            echo "Bundle URL: $BUNDLE_URL"
            echo "Pipeline ID: $PIPELINE_ID"
            echo "Checksum: $CHECKSUM"
            curl -X POST -H "Content-Type: application/json" -d '{"checksum": "'"$CHECKSUM"'", "bundleUrl": "'"$BUNDLE_URL"'", "pipelineId": "'"$PIPELINE_ID"'"}' << pipeline.parameters.ONE_CLICK_SERVER_URL >>/circleci/notify

workflows:
  version: 2
  build-and-publish:
    jobs:
      - publish
